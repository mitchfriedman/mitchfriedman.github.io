<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Mitchell Friedman</title>
    <link>/categories/programming/</link>
    <description>Recent content in programming on Mitchell Friedman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 13:32:44 +0100</lastBuildDate>
    
	<atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Load Testing For Everyone</title>
      <link>/blog/load-generator/</link>
      <pubDate>Sat, 08 Jun 2019 13:32:44 +0100</pubDate>
      
      <guid>/blog/load-generator/</guid>
      <description>What is load testing? From the wikipedia, we have one definition of:
 Load testing is the process of putting demand on a system and measuring its response.
 This is a pretty straight forward and simple way of putting it, but I like it - throw some load at a service and see what happens. Specifically, when we&amp;rsquo;re talking about load testing HTTP services, some of the things we are looking for are;</description>
    </item>
    
    <item>
      <title>JSON Schema</title>
      <link>/blog/json-schema/</link>
      <pubDate>Sun, 19 May 2019 16:20:00 +0100</pubDate>
      
      <guid>/blog/json-schema/</guid>
      <description>JSON Schema + Go + APIs After working on a few Go HTTP servers i&amp;rsquo;ve noticed a few different patterns for API validations. I&amp;rsquo;m going to attempt to show off yet another way this can be done and hopefully convince you to try out JSON Schema.
What is JSON Schema? If you haven&amp;rsquo;t heard of JSON Schema before, it&amp;rsquo;s an attempt to apply structure to otherwise unstructured JSON. As developers, sometimes &amp;ldquo;unstructured&amp;rdquo; JSON is incredibly convenient (looking at you postgres), but at some point in the lifecycle of that data, you will need to perform some validation on it.</description>
    </item>
    
  </channel>
</rss>